name: 'CI Provision'
on:
    pull_request:
        types:
            - opened
            - reopened
        branches:
            - main
            - develop
            - 'feature/**'
            - 'bugfix/**'
            - 'release/**'
            - 'hotfix/**'
            - 'support/**'
    
jobs:
    terraform:
        env:
          PUBLIC_KEY: ${{ secrets.P_KEY }}
          TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
          TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          DOMAIN_NAME_FOR_CF: ${{ vars.DOMAIN_NAME_FOR_CF }}
          SUBDOMAIN_PART_FOR_CF: ${{ vars.SUBDOMAIN_PART_FOR_CF }}
        defaults:
          run:
            working-directory: ec2-provision
        name: "EC2 Provision"
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
        outputs:
          public_ip: ${{ steps.public_ip.outputs.ip }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v3
            with:
              terraform_version: "1.6.3"
              cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          - name: Init terraform
            run: terraform init
            id: init
          - id: plan
            run: terraform plan -var="public_key=$PUBLIC_KEY" -var="domain_name=$DOMAIN_NAME_FOR_CF" -var="sub_domain_name=$SUBDOMAIN_PART_FOR_CF" -var="cloudflare_token=$CLOUDFLARE_TOKEN" -no-color -input=false
          - id: apply
            run: terraform apply -auto-approve -var="public_key=$PUBLIC_KEY" -var="domain_name=$DOMAIN_NAME_FOR_CF" -var="sub_domain_name=$SUBDOMAIN_PART_FOR_CF" -var="cloudflare_token=$CLOUDFLARE_TOKEN" -no-color -input=false
          - name: get public ip
            id: public_ip
            run: echo "ip=$(terraform output public_ip_ec2 | tr -d '"')" >> "$GITHUB_OUTPUT"
          - name: Update PR
            if: github.event_name == 'pull_request'
            uses: actions/github-script@v7
            id: terraform-comment
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
            with:
                script: |
                  const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                  <details><summary>Show Plan</summary>

                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`

                  </details>

                  #### Terraform Apply üöÄ\`${{ steps.apply.outcome }}\`

                  <details><summary>Show Apply</summary>

                  \`\`\`\n
                  ${process.env.APPLY}
                  \`\`\`

                  </details>

                  *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })

    nginx_wordpress:
          name: provision nginx and wordpress to ec2-provision
          needs: terraform
          runs-on: ubuntu-latest
          env:
            S_KEY: ${{ secrets.S_KEY }}
            PUBLIC_IP: ${{ needs.terraform.outputs.public_ip }}
            PORT_SSH: ${{ secrets.PORT_SSH }}
            USERNAME_VM: ${{ secrets.USERNAME_EC2 }}
            ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD }}
            DB_NAME: ${{ secrets.DB_NAME }}
            USERNAME_DB: ${{ secrets.USERNAME_DB }}
            USERNAME: ${{ secrets.USERNAME }}
            PASSWORD: ${{ secrets.PASSWORD }}
            DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
            TITLE: ${{ vars.TITLE }}
            EMAIL: ${{ secrets.EMAIL }}
            COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          permissions:
            contents: read
            pull-requests: write
          steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: deploy using ssh or rsync
              run: |
                eval `ssh-agent`
                ssh-add - <<< "${S_KEY}"
                echo "Appending ssh-keyscan result to known-hsots"
                mkdir ~/.ssh
                chmod 700 ~/.ssh
                ssh-keyscan -H -p $PORT_SSH $PUBLIC_IP >> ~/.ssh/known_hosts
                chmod 600 ~/.ssh/known_hosts
                ls -l ~/.ssh/known_hosts
                echo -e "Host *\n\tGSSAPIAuthentication yes\n\tServerAliveInterval 600\n\tTCPKeepAlive yes\n\tIPQoS=throughput" > ~/.ssh/config
                chmod 600 ~/.ssh/config
                rsync -avzqR script -e "ssh -p ${PORT_SSH}" "$USERNAME_VM@$PUBLIC_IP:~/"
                [[ $? -ne 0 ]] && echo "Warning: rsync failed!" 
                ssh -p $PORT_SSH $USERNAME_VM@$PUBLIC_IP "sudo rm -rf /root/script" > /dev/null 2>&1
                ssh -p $PORT_SSH $USERNAME_VM@$PUBLIC_IP "sudo mv script /root"
                [[ $? -ne 0 ]] && echo "Warning: ssh executing mv failed!"
                ssh -p $PORT_SSH $USERNAME_VM@$PUBLIC_IP "sudo chown root:root /root/script -R"
                [[ $? -ne 0 ]] && echo "Warning: ssh executing chown failed!"
                ssh -p $PORT_SSH $USERNAME_VM@$PUBLIC_IP "sudo find /root/script -type f -exec chmod 755 {} +"
                [[ $? -ne 0 ]] && echo "Warning: ssh executing find failed!"
                ssh -p $PORT_SSH $USERNAME_VM@$PUBLIC_IP sudo /root/script/main.sh -d "$DOMAIN_NAME" -r "$ROOT_PASSWORD" -ud "$USERNAME_DB" -db "$DB_NAME" -t "$TITLE" -u "$USERNAME" -p "$PASSWORD" -e "$EMAIL" --github-token "$COMPOSER_TOKEN"
                [[ $? -ne 0 ]] && echo "Warning: ssh executing script/main.sh failed!"
    test_curl:
      runs-on: ubuntu-latest
      needs: [terraform, nginx_wordpress]
      permissions:
          contents: read
          pull-requests: write
      steps:
        - name: test curl TTFB
          env:
            DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          run: |
            curl -w "Connect time: %{time_connect}\nTime to first byte: %{time_starttransfer}\nTotal: %{time_total}" -o /dev/null -sL "http://$DOMAIN_NAME"
        - name: test curl other timings
          env:
            DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          run: |
            curl -w "time_appconnect: %{time_appconnect}\ntime_connect: %{time_connect}\ntime_namelookup: %{time_namelookup}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" -o /dev/null -sL "http://$DOMAIN_NAME"

